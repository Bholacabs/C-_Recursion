// With ds

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int subseq(int i,vector<int> &out,int sum,int arr[],int n,int k)
{
    if(i>=n)
    {
        if(sum==k)
        {
          //for(auto it:out)
          //{
            //  cout<<it<<" ";
          //}
          //cout<<endl;
          //return true;
          return 1;
        }
        
        //return false;
        return 0;
    }
    
    out.push_back(arr[i]);
    sum=sum+arr[i];
    int l=subseq(i+1,out,sum,arr,n,k);
    out.pop_back();
    sum=sum-arr[i];
    
    int r=subseq(i+1,out,sum,arr,n,k);
    
    return r+l;

}

int main()
{
    int n;
    n=4;
    int arr[]={1,2,1,3};
    vector<int> out;
    
    cout<<subseq(0,out,0,arr,n,3);
    
    return 0;
}

// Without ds works Perfectly

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int subseq(int i,int sum,int arr[],int n,int k)
{
    // if array has only +ives
    //if(sum>k)
    //{
    //    return 0;
    //}
    if(i>=n)
    {
        if(sum==k)
        return 1;
        
        return 0;
    }
    
    sum=sum+arr[i];
    int l=subseq(i+1,sum,arr,n,k);
    sum=sum-arr[i];
    int r=subseq(i+1,sum,arr,n,k);
    
    return r+l;
}

int main()
{
    int n;
    n=4;
    int arr[]={1,2,1,3};

    cout<<subseq(0,0,arr,n,3);
    
    return 0;
}